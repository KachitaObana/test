
▼Django演習

https://docs.djangoproject.com/ja/2.2/intro/tutorial01/#write-your-first-view

mysiteプロジェクトを作成
mysiteディレクトリが作成される。
django-admin startproject mysite

mysiteに入って、サーバー起動する
cd mysite
py manage.py runserver

http://127.0.0.1:8000/にアクセス
ロケットが離陸しているページが出る。
なぜか最初だけ



▼Djangoをpipでインストールしたいのにプロキシで弾かれ、やったこと

これの通りにやりたい。
https://docs.djangoproject.com/ja/2.2/intro/install/

が。
pip install Django --proxy http://[user:pass]@proxy:port
いろいろ調べたが、プロキシ通らない。
基本認証ではなく特殊な認証を行っているためかと思われる。

別環境にpythonをインストール
https://www.python.jp/install/windows/install_py3.html

念のため、pipをupdate
python pip install --upgrade pip

いいの見つけた。ダウンロード⇒運ぶ⇒インストールという作戦。
https://gammasoft.jp/support/pip-install-error/

カレントディレクトリにファイルを入手する
python -m pip download Django

>python -m pip install --no-index --find-links=django_installer Django
Looking in links: django_installer
Collecting Django
Collecting pytz (from Django)
Collecting sqlparse (from Django)
Installing collected packages: pytz, sqlparse, Django
Successfully installed Django-2.2.7 pytz-2019.3 sqlparse-0.3.0

結局、Djangoに限らず、requests、lxmlなども同じ手順で入れていかないといけないので、今後けっこう地獄。

バージョンを確認
$ python
Python 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:21:23) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import django
>>> print(django.get_version())
2.2.7


▼よく使うコマンド
○net user (ユーザー名) /domain

net user katsuo /domain
最終パスワード変更日時               2019/10/08 8:32:20
パスワード有効期間                   2020/01/06 8:32:20

ほかにも、所属しているセキュリティグループの確認、ができる。

○コマンド
ping （ホスト名orIP） /t

>ping 10.99.999.99 /t
10.99.999.99 からの応答: バイト数 =32 時間 =4ms TTL=123
10.99.999.99 からの応答: バイト数 =32 時間 =4ms TTL=123
10.99.999.99 からの応答: バイト数 =32 時間 =4ms TTL=123
要求がタイムアウトしました。
要求がタイムアウトしました。
要求がタイムアウトしました。
10.99.999.99 からの応答: バイト数 =32 時間 =4ms TTL=123
10.99.999.99 からの応答: バイト数 =32 時間 =4ms TTL=123
10.99.999.99 からの応答: バイト数 =32 時間 =4ms TTL=123

Cntl+Cで止めること。

○コマンド
nslookup （ホスト名）

>nslookup HOST-0001
サーバー:  ADSERVER01.katsuocompany.co.jp
Address:  10.99.111.1

権限のない回答:
名前:    HOST-0001.katsuocompany.co.jp
Address:  10.99.999.99


○tracert （ホスト名orIP）

>tracert HOST-0001
HOST-0001.katsuocompany.co.jp [10.99.999.99] へのルートをトレースしています
経由するホップ数は最大 30 です:

  1     2 ms     2 ms     2 ms  10.99.999.254
  2     1 ms     1 ms     1 ms  10.99.128.1
  3     2 ms     2 ms     2 ms  10.99.128.254
  4     2 ms     1 ms     1 ms  192.168.10.1
  5    11 ms     4 ms     4 ms  192.168.1.1
  6     3 ms     4 ms     4 ms  HOST-0001.katsuocompany.co.jp [10.99.999.99]

トレースを完了しました。




------------------------------------------------------
▼Pythonを初めて触るところからTodoアプリの作成まで

・筆者のレベル
　Pythonを触ったことがない。
　COBOL2年＞Java1年＞PHP3ヶ月＞Linux少々＞Webアプリ開発少々

・「progate」
　レッスン１のみでOK
　それ以降は課金されてしまう。

・pythonインストール＆「Helloworld」まで
https://prog-8.com/docs/python-env-win
※Atomはここで導入しました。めっちゃかっこいい。

まずは練習から
・まずはDBのこと
http://www.designmap.info/2016/12/11/python-19/

・サーバーも
http://www.designmap.info/2016/12/11/python-20/
僕の場合だと文字化けしてしまったので、以下の1行を削除して、とりあえず前に進みました。
<meta charset="UTF-8">

・入力フォームありバージョン
http://www.designmap.info/2016/12/12/python-21/
全文差し替えじゃなくて、ちゃんと太字を追記でやらないとダメです。

form = cgi.FieldStorage()
print(form)

「追加」ボタンを押すと、
FieldStorage(None, None, [MiniFieldStorage('name', 'コーヒー豆を買いにいく'), MiniFieldStorage('mode', 'add')])
がでない。

明確に定義しないと行けないことを痛感。
<meta charset="UTF-8">
だと、文字化けしますが、代わりに以下としました。
<meta charset="shift-jis">

多分、コマンドプロンプト上でLiteSQLにレコードを追加していった関係で、
shift-jisで文字列が入っているのかと。
なので、HTML全体もshift-jisに寄せました。


文字列を入れて「追加」を押すと今度は、画面真っ白に。
テーブルの中身を表示したら、今度はテーブルのほうが文字化け。
C:\Users\*****\Desktop\アプリ\python\todolist_lesson>python db1.py
1 ノートを買いにいく
2 切手を買いにいく
3 洋服を買いにいく
4 �R�[�q�[���𔃂�


以下で４番目のレコードを削除。
>>> import sqlite3
>>> conn = sqlite3.connect('todolist.db')
>>> curs = conn.cursor()
>>> curs.execute('select * from tasks')
<sqlite3.Cursor object at 0x0135AAA0>
>>> print(curs.fetchall())
[(1, 'ノートを買いにいく'), (2, '切手を買いにいく'), (3, '洋服を買いにいく'), (4, '�R�[�q�[���\U000140c2�')]
>>> curs.execute('select * from tasks where id = 4')
<sqlite3.Cursor object at 0x0135AAA0>
>>> print(curs.fetchall())
[(4, '�R�[�q�[���\U000140c2�')]
>>> curs.execute('delete from tasks where id = 4')
<sqlite3.Cursor object at 0x0135AAA0>
>>> curs.execute('select * from tasks')
<sqlite3.Cursor object at 0x0135AAA0>
>>> print(curs.fetchall())
[(1, 'ノートを買いにいく'), (2, '切手を買いにいく'), (3, '洋服を買いにいく')]
>>>conn.commit()
>>>

いったん画面復活。

画面から再度入力すると、画面真っ白に。
>>> curs.execute('select * from tasks')
<sqlite3.Cursor object at 0x0135AAA0>
>>> print(curs.fetchall())
[(1, 'ノートを買いにいく'), (2, '切手を買いにいく'), (3, '洋服を買いにいく'), (5, '�e�X�g')]
>>>

https://teratail.com/questions/130659
レコード全部削除。
これを追加したら治った。
# -- ↓デフォルトの出力(print)がsjisになっているのをutf-8にする↓ --
import sys
import io
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
# -- ↑デフォルトの出力(print)がsjisになっているのをutf-8にする↑ --

さらに以下に戻す。
<meta charset="UTF-8">


まとめると。

・コマンドプロンプト上でINSERT⇒sjis
・画面で入力「追加」⇒utf-8
・HTML生成(print)⇒sjis

・コマンドプロンプト上でINSERT⇒sjis　※テーブル全レコード削除
・画面で入力「追加」⇒utf-8
・HTML生成(print)⇒utf-8　※変更


http://www.designmap.info/2016/12/13/python-22/
簡単。


#!/usr/bin/env python3
import cgi
import html
import sqlite3

# -- ↓デフォルトの出力(print)がsjisになっているのをutf-8にする↓ --
import sys
import io
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
# -- ↑デフォルトの出力(print)がsjisになっているのをutf-8にする↑ --

conn = sqlite3.connect('todolist.db')
curs = conn.cursor()


print('Content-type: text/html')
print('')


def print_html(data=''):
    print('''\
    <!DOCTYPE html>
    <html>
    <head>
    <meta charset="utf-8">
    <title>Todoリスト</title>
    </head>
    <body>
    <form action="todo.py" method="post">
    タスク名<input type="text" name="name">
    <input type="hidden" name="mode" value="add">
    <input type="submit" value="追加">
    </form>
    <ul>
    {0}
    </ul>
    </body>
    </html>
    '''.format(data))

form = cgi.FieldStorage()
mode = form.getvalue('mode')

if mode == 'add':
    name = form.getvalue('name')
    name = html.escape(name)

    sql = ('INSERT INTO tasks(name) VALUES (?)')
    curs.execute(sql, (name,))
    conn.commit()

if mode == 'done':
    id = form.getvalue('id')
    id = html.escape(id)

    sql = ('DELETE FROM tasks WHERE id = ?')
    curs.execute(sql, (id,))
    conn.commit()

curs.execute('SELECT * FROM tasks')
rows = curs.fetchall()

data = ""

for id, name in rows:
    data +=  '''
    <li>{0}
    <form action="todo.py" method="post">
    <input type="submit" value="済んだ">
    <input type="hidden" name="id" value="{1}">
    <input type="hidden" name="mode" value="done">
    </form>
    </li>
    '''.format(name, id)

print_html(data)



------------------------------------------------------
▼Pythonでブラウザベースのアプリ開発の基本を学ぶ
データベース
描画

データベース参考サイト
https://techacademy.jp/magazine/19312

これからsqlite3使うよーな宣言
import sqlite3

DBとのコネクションを定義。conn.commitやconn.closeメソッドが使える。その名前のDBがなければ作る。
conn = sqlite3.connect('example.db')

テーブル操作オブジェクト。c.execute("SQL文")で該当DBにもろもろの操作ができる。
c = conn.cursor()

SQL実行
c.execute("SQL文")

コミット
conn.commit()

お行儀よくDBとはコネクションを切る
conn.close()

コマンドプロンプトからpython起動して入力していく場合は、まずはchcp 65001と打つこと。
テーブルの中身,HTML,ソースコードのすべてが統一されていないと、あらぬ障害が起きる。
僕の場合はUTF-8に統一しています。

確認用コマンド：chcp
⇒932:sjis
⇒65001:utf-8
https://qiita.com/user0/items/a9116acc7bd7b70ecfb0


https://techacademy.jp/magazine/21488


起動コマンド
python -m http.server --cgi 8080




------------------------------------------------------
▼外部設計
・タスクは縦に並べる（親子で最小日付のタスクの順に並ぶ）
▼親子タスク共通
・完了ボタン(下に完了日)、タスク、メモ、
・今日やるタスクは太字
・明日以降のタスク、右に「今日やる」「カレンダー」「削除」ボタン
・今日のタスク、右に「明日やる」「カレンダー」「削除」ボタン
・タスクの左は完了ボタン⇒押すと取り消し線⇒完了タスクの表示/非表示切替可能
▼親タスク
・タスクの右側に対応メモを記載（最大の大きさは定義し、スクロールさせる）
・親タスクの追加は一番上から「親タスク名、今日やる、日付」
・右上検索バー
・検索結果一覧「親タスク名、子タスク名、タスクメモ」でヒットすると、太字赤字。親タスク含めて一覧表示される。
▼小タスク
・展開済みとして表示される


------------------------------------------------------
▼Python

初心者向けに簡潔にまとめられており、特に「機械学習とデータ分析入門」というセクションには、Pythonのパッケージ(Numpy、Pandas、Matplotlib等)の基本的な使い方がコード付きで説明されています。Pythonによるデータ分析の教科書を買う前に試してみるのもありかと思います。
https://tutorials.chainer.org/ja/
------------------------------------------------------
